// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cell.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cell.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class CellDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cell> {
} _Cell_default_instance_;
class CellSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CellSet> {
} _CellSet_default_instance_;

namespace protobuf_cell_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, ageb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, agek_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, ca2p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, ca2p_avg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, rest_div_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, ex_fat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, in_fat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, is_touch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, spr_nat_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, pair_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, fix_origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, nullified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, malignant_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellSet, cell_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Cell)},
  { 21, -1, sizeof(CellSet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cell_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CellSet_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cell.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Cell_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CellSet_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Cell_default_instance_.DefaultConstruct();
  _CellSet_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ncell.proto\"\303\003\n\004Cell\022\r\n\005index\030\001 \001(\005\022\036\n\005"
      "state\030\002 \001(\0162\017.Cell.CellState\022\016\n\006radius\030\003"
      " \001(\001\022\014\n\004ageb\030\004 \001(\001\022\014\n\004agek\030\005 \001(\001\022\014\n\004ca2p"
      "\030\006 \001(\001\022\020\n\010ca2p_avg\030\007 \001(\001\022\017\n\003pos\030\010 \003(\001B\002\020"
      "\001\022\026\n\016rest_div_times\030\t \001(\005\022\016\n\006ex_fat\030\n \001("
      "\001\022\016\n\006in_fat\030\013 \001(\001\022\020\n\010is_touch\030\014 \001(\010\022\023\n\013s"
      "pr_nat_len\030\r \001(\001\022\022\n\npair_index\030\016 \001(\005\022\022\n\n"
      "fix_origin\030\017 \001(\005\022\021\n\tnullified\030\020 \001(\010\022\021\n\tm"
      "alignant\030\021 \001(\010\"\201\001\n\tCellState\022\t\n\005ALIVE\020\000\022"
      "\010\n\004DEAD\020\001\022\010\n\004DISA\020\002\022\n\n\006UNUSED\020\003\022\007\n\003FIX\020\004"
      "\022\t\n\005BLANK\020\005\022\007\n\003DER\020\006\022\n\n\006MUSUME\020\007\022\007\n\003AIR\020"
      "\010\022\010\n\004MEMB\020\t\022\r\n\tDUMMY_FIX\020\n\"\036\n\007CellSet\022\023\n"
      "\004cell\030\001 \003(\0132\005.Cellb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 506);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cell.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cell_2eproto

const ::google::protobuf::EnumDescriptor* Cell_CellState_descriptor() {
  protobuf_cell_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cell_2eproto::file_level_enum_descriptors[0];
}
bool Cell_CellState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cell_CellState Cell::ALIVE;
const Cell_CellState Cell::DEAD;
const Cell_CellState Cell::DISA;
const Cell_CellState Cell::UNUSED;
const Cell_CellState Cell::FIX;
const Cell_CellState Cell::BLANK;
const Cell_CellState Cell::DER;
const Cell_CellState Cell::MUSUME;
const Cell_CellState Cell::AIR;
const Cell_CellState Cell::MEMB;
const Cell_CellState Cell::DUMMY_FIX;
const Cell_CellState Cell::CellState_MIN;
const Cell_CellState Cell::CellState_MAX;
const int Cell::CellState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cell::kIndexFieldNumber;
const int Cell::kStateFieldNumber;
const int Cell::kRadiusFieldNumber;
const int Cell::kAgebFieldNumber;
const int Cell::kAgekFieldNumber;
const int Cell::kCa2PFieldNumber;
const int Cell::kCa2PAvgFieldNumber;
const int Cell::kPosFieldNumber;
const int Cell::kRestDivTimesFieldNumber;
const int Cell::kExFatFieldNumber;
const int Cell::kInFatFieldNumber;
const int Cell::kIsTouchFieldNumber;
const int Cell::kSprNatLenFieldNumber;
const int Cell::kPairIndexFieldNumber;
const int Cell::kFixOriginFieldNumber;
const int Cell::kNullifiedFieldNumber;
const int Cell::kMalignantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cell::Cell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cell_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cell)
}
Cell::Cell(const Cell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pos_(from.pos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&malignant_) -
    reinterpret_cast<char*>(&index_) + sizeof(malignant_));
  // @@protoc_insertion_point(copy_constructor:Cell)
}

void Cell::SharedCtor() {
  ::memset(&index_, 0, reinterpret_cast<char*>(&malignant_) -
    reinterpret_cast<char*>(&index_) + sizeof(malignant_));
  _cached_size_ = 0;
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:Cell)
  SharedDtor();
}

void Cell::SharedDtor() {
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  protobuf_cell_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cell_2eproto::file_level_metadata[0].descriptor;
}

const Cell& Cell::default_instance() {
  protobuf_cell_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cell* Cell::New(::google::protobuf::Arena* arena) const {
  Cell* n = new Cell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:Cell)
  pos_.Clear();
  ::memset(&index_, 0, reinterpret_cast<char*>(&malignant_) -
    reinterpret_cast<char*>(&index_) + sizeof(malignant_));
}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 index = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Cell.CellState state = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::Cell_CellState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ageb = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ageb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double agek = 5;
      case 5: {
        if (tag == 41u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &agek_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ca2p = 6;
      case 6: {
        if (tag == 49u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ca2p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ca2p_avg = 7;
      case 7: {
        if (tag == 57u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ca2p_avg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double pos = 8 [packed = true];
      case 8: {
        if (tag == 66u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pos())));
        } else if (tag == 65u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66u, input, this->mutable_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rest_div_times = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_div_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ex_fat = 10;
      case 10: {
        if (tag == 81u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ex_fat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double in_fat = 11;
      case 11: {
        if (tag == 89u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &in_fat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_touch = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_touch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double spr_nat_len = 13;
      case 13: {
        if (tag == 105u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spr_nat_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pair_index = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pair_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fix_origin = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fix_origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool nullified = 16;
      case 16: {
        if (tag == 128u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nullified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool malignant = 17;
      case 17: {
        if (tag == 136u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &malignant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cell)
  return false;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cell)
  // int32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // .Cell.CellState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // double radius = 3;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radius(), output);
  }

  // double ageb = 4;
  if (this->ageb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ageb(), output);
  }

  // double agek = 5;
  if (this->agek() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->agek(), output);
  }

  // double ca2p = 6;
  if (this->ca2p() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ca2p(), output);
  }

  // double ca2p_avg = 7;
  if (this->ca2p_avg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ca2p_avg(), output);
  }

  // repeated double pos = 8 [packed = true];
  if (this->pos_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pos_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->pos().data(), this->pos_size(), output);
  }

  // int32 rest_div_times = 9;
  if (this->rest_div_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rest_div_times(), output);
  }

  // double ex_fat = 10;
  if (this->ex_fat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->ex_fat(), output);
  }

  // double in_fat = 11;
  if (this->in_fat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->in_fat(), output);
  }

  // bool is_touch = 12;
  if (this->is_touch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_touch(), output);
  }

  // double spr_nat_len = 13;
  if (this->spr_nat_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->spr_nat_len(), output);
  }

  // int32 pair_index = 14;
  if (this->pair_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pair_index(), output);
  }

  // int32 fix_origin = 15;
  if (this->fix_origin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->fix_origin(), output);
  }

  // bool nullified = 16;
  if (this->nullified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->nullified(), output);
  }

  // bool malignant = 17;
  if (this->malignant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->malignant(), output);
  }

  // @@protoc_insertion_point(serialize_end:Cell)
}

::google::protobuf::uint8* Cell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Cell)
  // int32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // .Cell.CellState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // double radius = 3;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radius(), target);
  }

  // double ageb = 4;
  if (this->ageb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ageb(), target);
  }

  // double agek = 5;
  if (this->agek() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->agek(), target);
  }

  // double ca2p = 6;
  if (this->ca2p() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ca2p(), target);
  }

  // double ca2p_avg = 7;
  if (this->ca2p_avg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ca2p_avg(), target);
  }

  // repeated double pos = 8 [packed = true];
  if (this->pos_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pos_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pos(i), target);
  }

  // int32 rest_div_times = 9;
  if (this->rest_div_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rest_div_times(), target);
  }

  // double ex_fat = 10;
  if (this->ex_fat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->ex_fat(), target);
  }

  // double in_fat = 11;
  if (this->in_fat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->in_fat(), target);
  }

  // bool is_touch = 12;
  if (this->is_touch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_touch(), target);
  }

  // double spr_nat_len = 13;
  if (this->spr_nat_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->spr_nat_len(), target);
  }

  // int32 pair_index = 14;
  if (this->pair_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pair_index(), target);
  }

  // int32 fix_origin = 15;
  if (this->fix_origin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->fix_origin(), target);
  }

  // bool nullified = 16;
  if (this->nullified() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->nullified(), target);
  }

  // bool malignant = 17;
  if (this->malignant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->malignant(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Cell)
  return target;
}

size_t Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cell)
  size_t total_size = 0;

  // repeated double pos = 8 [packed = true];
  {
    unsigned int count = this->pos_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pos_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // .Cell.CellState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // double radius = 3;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  // double ageb = 4;
  if (this->ageb() != 0) {
    total_size += 1 + 8;
  }

  // double agek = 5;
  if (this->agek() != 0) {
    total_size += 1 + 8;
  }

  // double ca2p = 6;
  if (this->ca2p() != 0) {
    total_size += 1 + 8;
  }

  // double ca2p_avg = 7;
  if (this->ca2p_avg() != 0) {
    total_size += 1 + 8;
  }

  // double ex_fat = 10;
  if (this->ex_fat() != 0) {
    total_size += 1 + 8;
  }

  // double in_fat = 11;
  if (this->in_fat() != 0) {
    total_size += 1 + 8;
  }

  // int32 rest_div_times = 9;
  if (this->rest_div_times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rest_div_times());
  }

  // int32 pair_index = 14;
  if (this->pair_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pair_index());
  }

  // double spr_nat_len = 13;
  if (this->spr_nat_len() != 0) {
    total_size += 1 + 8;
  }

  // int32 fix_origin = 15;
  if (this->fix_origin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fix_origin());
  }

  // bool is_touch = 12;
  if (this->is_touch() != 0) {
    total_size += 1 + 1;
  }

  // bool nullified = 16;
  if (this->nullified() != 0) {
    total_size += 2 + 1;
  }

  // bool malignant = 17;
  if (this->malignant() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Cell)
  GOOGLE_DCHECK_NE(&from, this);
  const Cell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Cell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Cell)
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pos_.MergeFrom(from.pos_);
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.ageb() != 0) {
    set_ageb(from.ageb());
  }
  if (from.agek() != 0) {
    set_agek(from.agek());
  }
  if (from.ca2p() != 0) {
    set_ca2p(from.ca2p());
  }
  if (from.ca2p_avg() != 0) {
    set_ca2p_avg(from.ca2p_avg());
  }
  if (from.ex_fat() != 0) {
    set_ex_fat(from.ex_fat());
  }
  if (from.in_fat() != 0) {
    set_in_fat(from.in_fat());
  }
  if (from.rest_div_times() != 0) {
    set_rest_div_times(from.rest_div_times());
  }
  if (from.pair_index() != 0) {
    set_pair_index(from.pair_index());
  }
  if (from.spr_nat_len() != 0) {
    set_spr_nat_len(from.spr_nat_len());
  }
  if (from.fix_origin() != 0) {
    set_fix_origin(from.fix_origin());
  }
  if (from.is_touch() != 0) {
    set_is_touch(from.is_touch());
  }
  if (from.nullified() != 0) {
    set_nullified(from.nullified());
  }
  if (from.malignant() != 0) {
    set_malignant(from.malignant());
  }
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  return true;
}

void Cell::Swap(Cell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cell::InternalSwap(Cell* other) {
  pos_.UnsafeArenaSwap(&other->pos_);
  std::swap(index_, other->index_);
  std::swap(state_, other->state_);
  std::swap(radius_, other->radius_);
  std::swap(ageb_, other->ageb_);
  std::swap(agek_, other->agek_);
  std::swap(ca2p_, other->ca2p_);
  std::swap(ca2p_avg_, other->ca2p_avg_);
  std::swap(ex_fat_, other->ex_fat_);
  std::swap(in_fat_, other->in_fat_);
  std::swap(rest_div_times_, other->rest_div_times_);
  std::swap(pair_index_, other->pair_index_);
  std::swap(spr_nat_len_, other->spr_nat_len_);
  std::swap(fix_origin_, other->fix_origin_);
  std::swap(is_touch_, other->is_touch_);
  std::swap(nullified_, other->nullified_);
  std::swap(malignant_, other->malignant_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_cell_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cell_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cell

// int32 index = 1;
void Cell::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 Cell::index() const {
  // @@protoc_insertion_point(field_get:Cell.index)
  return index_;
}
void Cell::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Cell.index)
}

// .Cell.CellState state = 2;
void Cell::clear_state() {
  state_ = 0;
}
::Cell_CellState Cell::state() const {
  // @@protoc_insertion_point(field_get:Cell.state)
  return static_cast< ::Cell_CellState >(state_);
}
void Cell::set_state(::Cell_CellState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Cell.state)
}

// double radius = 3;
void Cell::clear_radius() {
  radius_ = 0;
}
double Cell::radius() const {
  // @@protoc_insertion_point(field_get:Cell.radius)
  return radius_;
}
void Cell::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:Cell.radius)
}

// double ageb = 4;
void Cell::clear_ageb() {
  ageb_ = 0;
}
double Cell::ageb() const {
  // @@protoc_insertion_point(field_get:Cell.ageb)
  return ageb_;
}
void Cell::set_ageb(double value) {
  
  ageb_ = value;
  // @@protoc_insertion_point(field_set:Cell.ageb)
}

// double agek = 5;
void Cell::clear_agek() {
  agek_ = 0;
}
double Cell::agek() const {
  // @@protoc_insertion_point(field_get:Cell.agek)
  return agek_;
}
void Cell::set_agek(double value) {
  
  agek_ = value;
  // @@protoc_insertion_point(field_set:Cell.agek)
}

// double ca2p = 6;
void Cell::clear_ca2p() {
  ca2p_ = 0;
}
double Cell::ca2p() const {
  // @@protoc_insertion_point(field_get:Cell.ca2p)
  return ca2p_;
}
void Cell::set_ca2p(double value) {
  
  ca2p_ = value;
  // @@protoc_insertion_point(field_set:Cell.ca2p)
}

// double ca2p_avg = 7;
void Cell::clear_ca2p_avg() {
  ca2p_avg_ = 0;
}
double Cell::ca2p_avg() const {
  // @@protoc_insertion_point(field_get:Cell.ca2p_avg)
  return ca2p_avg_;
}
void Cell::set_ca2p_avg(double value) {
  
  ca2p_avg_ = value;
  // @@protoc_insertion_point(field_set:Cell.ca2p_avg)
}

// repeated double pos = 8 [packed = true];
int Cell::pos_size() const {
  return pos_.size();
}
void Cell::clear_pos() {
  pos_.Clear();
}
double Cell::pos(int index) const {
  // @@protoc_insertion_point(field_get:Cell.pos)
  return pos_.Get(index);
}
void Cell::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cell.pos)
}
void Cell::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:Cell.pos)
}
const ::google::protobuf::RepeatedField< double >&
Cell::pos() const {
  // @@protoc_insertion_point(field_list:Cell.pos)
  return pos_;
}
::google::protobuf::RepeatedField< double >*
Cell::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:Cell.pos)
  return &pos_;
}

// int32 rest_div_times = 9;
void Cell::clear_rest_div_times() {
  rest_div_times_ = 0;
}
::google::protobuf::int32 Cell::rest_div_times() const {
  // @@protoc_insertion_point(field_get:Cell.rest_div_times)
  return rest_div_times_;
}
void Cell::set_rest_div_times(::google::protobuf::int32 value) {
  
  rest_div_times_ = value;
  // @@protoc_insertion_point(field_set:Cell.rest_div_times)
}

// double ex_fat = 10;
void Cell::clear_ex_fat() {
  ex_fat_ = 0;
}
double Cell::ex_fat() const {
  // @@protoc_insertion_point(field_get:Cell.ex_fat)
  return ex_fat_;
}
void Cell::set_ex_fat(double value) {
  
  ex_fat_ = value;
  // @@protoc_insertion_point(field_set:Cell.ex_fat)
}

// double in_fat = 11;
void Cell::clear_in_fat() {
  in_fat_ = 0;
}
double Cell::in_fat() const {
  // @@protoc_insertion_point(field_get:Cell.in_fat)
  return in_fat_;
}
void Cell::set_in_fat(double value) {
  
  in_fat_ = value;
  // @@protoc_insertion_point(field_set:Cell.in_fat)
}

// bool is_touch = 12;
void Cell::clear_is_touch() {
  is_touch_ = false;
}
bool Cell::is_touch() const {
  // @@protoc_insertion_point(field_get:Cell.is_touch)
  return is_touch_;
}
void Cell::set_is_touch(bool value) {
  
  is_touch_ = value;
  // @@protoc_insertion_point(field_set:Cell.is_touch)
}

// double spr_nat_len = 13;
void Cell::clear_spr_nat_len() {
  spr_nat_len_ = 0;
}
double Cell::spr_nat_len() const {
  // @@protoc_insertion_point(field_get:Cell.spr_nat_len)
  return spr_nat_len_;
}
void Cell::set_spr_nat_len(double value) {
  
  spr_nat_len_ = value;
  // @@protoc_insertion_point(field_set:Cell.spr_nat_len)
}

// int32 pair_index = 14;
void Cell::clear_pair_index() {
  pair_index_ = 0;
}
::google::protobuf::int32 Cell::pair_index() const {
  // @@protoc_insertion_point(field_get:Cell.pair_index)
  return pair_index_;
}
void Cell::set_pair_index(::google::protobuf::int32 value) {
  
  pair_index_ = value;
  // @@protoc_insertion_point(field_set:Cell.pair_index)
}

// int32 fix_origin = 15;
void Cell::clear_fix_origin() {
  fix_origin_ = 0;
}
::google::protobuf::int32 Cell::fix_origin() const {
  // @@protoc_insertion_point(field_get:Cell.fix_origin)
  return fix_origin_;
}
void Cell::set_fix_origin(::google::protobuf::int32 value) {
  
  fix_origin_ = value;
  // @@protoc_insertion_point(field_set:Cell.fix_origin)
}

// bool nullified = 16;
void Cell::clear_nullified() {
  nullified_ = false;
}
bool Cell::nullified() const {
  // @@protoc_insertion_point(field_get:Cell.nullified)
  return nullified_;
}
void Cell::set_nullified(bool value) {
  
  nullified_ = value;
  // @@protoc_insertion_point(field_set:Cell.nullified)
}

// bool malignant = 17;
void Cell::clear_malignant() {
  malignant_ = false;
}
bool Cell::malignant() const {
  // @@protoc_insertion_point(field_get:Cell.malignant)
  return malignant_;
}
void Cell::set_malignant(bool value) {
  
  malignant_ = value;
  // @@protoc_insertion_point(field_set:Cell.malignant)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CellSet::kCellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CellSet::CellSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cell_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CellSet)
}
CellSet::CellSet(const CellSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cell_(from.cell_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CellSet)
}

void CellSet::SharedCtor() {
  _cached_size_ = 0;
}

CellSet::~CellSet() {
  // @@protoc_insertion_point(destructor:CellSet)
  SharedDtor();
}

void CellSet::SharedDtor() {
}

void CellSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellSet::descriptor() {
  protobuf_cell_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cell_2eproto::file_level_metadata[1].descriptor;
}

const CellSet& CellSet::default_instance() {
  protobuf_cell_2eproto::InitDefaults();
  return *internal_default_instance();
}

CellSet* CellSet::New(::google::protobuf::Arena* arena) const {
  CellSet* n = new CellSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CellSet::Clear() {
// @@protoc_insertion_point(message_clear_start:CellSet)
  cell_.Clear();
}

bool CellSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CellSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cell cell = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cell()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CellSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CellSet)
  return false;
#undef DO_
}

void CellSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CellSet)
  // repeated .Cell cell = 1;
  for (unsigned int i = 0, n = this->cell_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CellSet)
}

::google::protobuf::uint8* CellSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CellSet)
  // repeated .Cell cell = 1;
  for (unsigned int i = 0, n = this->cell_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cell(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CellSet)
  return target;
}

size_t CellSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CellSet)
  size_t total_size = 0;

  // repeated .Cell cell = 1;
  {
    unsigned int count = this->cell_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CellSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CellSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CellSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CellSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CellSet)
    MergeFrom(*source);
  }
}

void CellSet::MergeFrom(const CellSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CellSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cell_.MergeFrom(from.cell_);
}

void CellSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CellSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellSet::CopyFrom(const CellSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CellSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellSet::IsInitialized() const {
  return true;
}

void CellSet::Swap(CellSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CellSet::InternalSwap(CellSet* other) {
  cell_.UnsafeArenaSwap(&other->cell_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CellSet::GetMetadata() const {
  protobuf_cell_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cell_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CellSet

// repeated .Cell cell = 1;
int CellSet::cell_size() const {
  return cell_.size();
}
void CellSet::clear_cell() {
  cell_.Clear();
}
const ::Cell& CellSet::cell(int index) const {
  // @@protoc_insertion_point(field_get:CellSet.cell)
  return cell_.Get(index);
}
::Cell* CellSet::mutable_cell(int index) {
  // @@protoc_insertion_point(field_mutable:CellSet.cell)
  return cell_.Mutable(index);
}
::Cell* CellSet::add_cell() {
  // @@protoc_insertion_point(field_add:CellSet.cell)
  return cell_.Add();
}
::google::protobuf::RepeatedPtrField< ::Cell >*
CellSet::mutable_cell() {
  // @@protoc_insertion_point(field_mutable_list:CellSet.cell)
  return &cell_;
}
const ::google::protobuf::RepeatedPtrField< ::Cell >&
CellSet::cell() const {
  // @@protoc_insertion_point(field_list:CellSet.cell)
  return cell_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
