// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cell.proto

#ifndef PROTOBUF_cell_2eproto__INCLUDED
#define PROTOBUF_cell_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class Cell;
class CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class CellSet;
class CellSetDefaultTypeInternal;
extern CellSetDefaultTypeInternal _CellSet_default_instance_;

namespace protobuf_cell_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cell_2eproto

enum Cell_CellState {
  Cell_CellState_ALIVE = 0,
  Cell_CellState_DEAD = 1,
  Cell_CellState_DISA = 2,
  Cell_CellState_UNUSED = 3,
  Cell_CellState_FIX = 4,
  Cell_CellState_BLANK = 5,
  Cell_CellState_DER = 6,
  Cell_CellState_MUSUME = 7,
  Cell_CellState_AIR = 8,
  Cell_CellState_MEMB = 9,
  Cell_CellState_DUMMY_FIX = 10,
  Cell_CellState_Cell_CellState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Cell_CellState_Cell_CellState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Cell_CellState_IsValid(int value);
const Cell_CellState Cell_CellState_CellState_MIN = Cell_CellState_ALIVE;
const Cell_CellState Cell_CellState_CellState_MAX = Cell_CellState_DUMMY_FIX;
const int Cell_CellState_CellState_ARRAYSIZE = Cell_CellState_CellState_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cell_CellState_descriptor();
inline const ::std::string& Cell_CellState_Name(Cell_CellState value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cell_CellState_descriptor(), value);
}
inline bool Cell_CellState_Parse(
    const ::std::string& name, Cell_CellState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cell_CellState>(
    Cell_CellState_descriptor(), name, value);
}
// ===================================================================

class Cell : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cell) */ {
 public:
  Cell();
  virtual ~Cell();

  Cell(const Cell& from);

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cell& default_instance();

  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }

  void Swap(Cell* other);

  // implements Message ----------------------------------------------

  inline Cell* New() const PROTOBUF_FINAL { return New(NULL); }

  Cell* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cell& from);
  void MergeFrom(const Cell& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Cell_CellState CellState;
  static const CellState ALIVE =
    Cell_CellState_ALIVE;
  static const CellState DEAD =
    Cell_CellState_DEAD;
  static const CellState DISA =
    Cell_CellState_DISA;
  static const CellState UNUSED =
    Cell_CellState_UNUSED;
  static const CellState FIX =
    Cell_CellState_FIX;
  static const CellState BLANK =
    Cell_CellState_BLANK;
  static const CellState DER =
    Cell_CellState_DER;
  static const CellState MUSUME =
    Cell_CellState_MUSUME;
  static const CellState AIR =
    Cell_CellState_AIR;
  static const CellState MEMB =
    Cell_CellState_MEMB;
  static const CellState DUMMY_FIX =
    Cell_CellState_DUMMY_FIX;
  static inline bool CellState_IsValid(int value) {
    return Cell_CellState_IsValid(value);
  }
  static const CellState CellState_MIN =
    Cell_CellState_CellState_MIN;
  static const CellState CellState_MAX =
    Cell_CellState_CellState_MAX;
  static const int CellState_ARRAYSIZE =
    Cell_CellState_CellState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CellState_descriptor() {
    return Cell_CellState_descriptor();
  }
  static inline const ::std::string& CellState_Name(CellState value) {
    return Cell_CellState_Name(value);
  }
  static inline bool CellState_Parse(const ::std::string& name,
      CellState* value) {
    return Cell_CellState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated double pos = 8 [packed = true];
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 8;
  double pos(int index) const;
  void set_pos(int index, double value);
  void add_pos(double value);
  const ::google::protobuf::RepeatedField< double >&
      pos() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pos();

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // .Cell.CellState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::Cell_CellState state() const;
  void set_state(::Cell_CellState value);

  // double radius = 3;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  double radius() const;
  void set_radius(double value);

  // double ageb = 4;
  void clear_ageb();
  static const int kAgebFieldNumber = 4;
  double ageb() const;
  void set_ageb(double value);

  // double agek = 5;
  void clear_agek();
  static const int kAgekFieldNumber = 5;
  double agek() const;
  void set_agek(double value);

  // double ca2p = 6;
  void clear_ca2p();
  static const int kCa2PFieldNumber = 6;
  double ca2p() const;
  void set_ca2p(double value);

  // double ca2p_avg = 7;
  void clear_ca2p_avg();
  static const int kCa2PAvgFieldNumber = 7;
  double ca2p_avg() const;
  void set_ca2p_avg(double value);

  // double ex_fat = 10;
  void clear_ex_fat();
  static const int kExFatFieldNumber = 10;
  double ex_fat() const;
  void set_ex_fat(double value);

  // double in_fat = 11;
  void clear_in_fat();
  static const int kInFatFieldNumber = 11;
  double in_fat() const;
  void set_in_fat(double value);

  // int32 rest_div_times = 9;
  void clear_rest_div_times();
  static const int kRestDivTimesFieldNumber = 9;
  ::google::protobuf::int32 rest_div_times() const;
  void set_rest_div_times(::google::protobuf::int32 value);

  // int32 pair_index = 14;
  void clear_pair_index();
  static const int kPairIndexFieldNumber = 14;
  ::google::protobuf::int32 pair_index() const;
  void set_pair_index(::google::protobuf::int32 value);

  // double spr_nat_len = 13;
  void clear_spr_nat_len();
  static const int kSprNatLenFieldNumber = 13;
  double spr_nat_len() const;
  void set_spr_nat_len(double value);

  // int32 fix_origin = 15;
  void clear_fix_origin();
  static const int kFixOriginFieldNumber = 15;
  ::google::protobuf::int32 fix_origin() const;
  void set_fix_origin(::google::protobuf::int32 value);

  // bool is_touch = 12;
  void clear_is_touch();
  static const int kIsTouchFieldNumber = 12;
  bool is_touch() const;
  void set_is_touch(bool value);

  // bool nullified = 16;
  void clear_nullified();
  static const int kNullifiedFieldNumber = 16;
  bool nullified() const;
  void set_nullified(bool value);

  // bool malignant = 17;
  void clear_malignant();
  static const int kMalignantFieldNumber = 17;
  bool malignant() const;
  void set_malignant(bool value);

  // @@protoc_insertion_point(class_scope:Cell)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::int32 index_;
  int state_;
  double radius_;
  double ageb_;
  double agek_;
  double ca2p_;
  double ca2p_avg_;
  double ex_fat_;
  double in_fat_;
  ::google::protobuf::int32 rest_div_times_;
  ::google::protobuf::int32 pair_index_;
  double spr_nat_len_;
  ::google::protobuf::int32 fix_origin_;
  bool is_touch_;
  bool nullified_;
  bool malignant_;
  mutable int _cached_size_;
  friend struct  protobuf_cell_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CellSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CellSet) */ {
 public:
  CellSet();
  virtual ~CellSet();

  CellSet(const CellSet& from);

  inline CellSet& operator=(const CellSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CellSet& default_instance();

  static inline const CellSet* internal_default_instance() {
    return reinterpret_cast<const CellSet*>(
               &_CellSet_default_instance_);
  }

  void Swap(CellSet* other);

  // implements Message ----------------------------------------------

  inline CellSet* New() const PROTOBUF_FINAL { return New(NULL); }

  CellSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CellSet& from);
  void MergeFrom(const CellSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CellSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cell cell = 1;
  int cell_size() const;
  void clear_cell();
  static const int kCellFieldNumber = 1;
  const ::Cell& cell(int index) const;
  ::Cell* mutable_cell(int index);
  ::Cell* add_cell();
  ::google::protobuf::RepeatedPtrField< ::Cell >*
      mutable_cell();
  const ::google::protobuf::RepeatedPtrField< ::Cell >&
      cell() const;

  // @@protoc_insertion_point(class_scope:CellSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Cell > cell_;
  mutable int _cached_size_;
  friend struct  protobuf_cell_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Cell

// int32 index = 1;
inline void Cell::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 Cell::index() const {
  // @@protoc_insertion_point(field_get:Cell.index)
  return index_;
}
inline void Cell::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Cell.index)
}

// .Cell.CellState state = 2;
inline void Cell::clear_state() {
  state_ = 0;
}
inline ::Cell_CellState Cell::state() const {
  // @@protoc_insertion_point(field_get:Cell.state)
  return static_cast< ::Cell_CellState >(state_);
}
inline void Cell::set_state(::Cell_CellState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Cell.state)
}

// double radius = 3;
inline void Cell::clear_radius() {
  radius_ = 0;
}
inline double Cell::radius() const {
  // @@protoc_insertion_point(field_get:Cell.radius)
  return radius_;
}
inline void Cell::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:Cell.radius)
}

// double ageb = 4;
inline void Cell::clear_ageb() {
  ageb_ = 0;
}
inline double Cell::ageb() const {
  // @@protoc_insertion_point(field_get:Cell.ageb)
  return ageb_;
}
inline void Cell::set_ageb(double value) {
  
  ageb_ = value;
  // @@protoc_insertion_point(field_set:Cell.ageb)
}

// double agek = 5;
inline void Cell::clear_agek() {
  agek_ = 0;
}
inline double Cell::agek() const {
  // @@protoc_insertion_point(field_get:Cell.agek)
  return agek_;
}
inline void Cell::set_agek(double value) {
  
  agek_ = value;
  // @@protoc_insertion_point(field_set:Cell.agek)
}

// double ca2p = 6;
inline void Cell::clear_ca2p() {
  ca2p_ = 0;
}
inline double Cell::ca2p() const {
  // @@protoc_insertion_point(field_get:Cell.ca2p)
  return ca2p_;
}
inline void Cell::set_ca2p(double value) {
  
  ca2p_ = value;
  // @@protoc_insertion_point(field_set:Cell.ca2p)
}

// double ca2p_avg = 7;
inline void Cell::clear_ca2p_avg() {
  ca2p_avg_ = 0;
}
inline double Cell::ca2p_avg() const {
  // @@protoc_insertion_point(field_get:Cell.ca2p_avg)
  return ca2p_avg_;
}
inline void Cell::set_ca2p_avg(double value) {
  
  ca2p_avg_ = value;
  // @@protoc_insertion_point(field_set:Cell.ca2p_avg)
}

// repeated double pos = 8 [packed = true];
inline int Cell::pos_size() const {
  return pos_.size();
}
inline void Cell::clear_pos() {
  pos_.Clear();
}
inline double Cell::pos(int index) const {
  // @@protoc_insertion_point(field_get:Cell.pos)
  return pos_.Get(index);
}
inline void Cell::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cell.pos)
}
inline void Cell::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:Cell.pos)
}
inline const ::google::protobuf::RepeatedField< double >&
Cell::pos() const {
  // @@protoc_insertion_point(field_list:Cell.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< double >*
Cell::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:Cell.pos)
  return &pos_;
}

// int32 rest_div_times = 9;
inline void Cell::clear_rest_div_times() {
  rest_div_times_ = 0;
}
inline ::google::protobuf::int32 Cell::rest_div_times() const {
  // @@protoc_insertion_point(field_get:Cell.rest_div_times)
  return rest_div_times_;
}
inline void Cell::set_rest_div_times(::google::protobuf::int32 value) {
  
  rest_div_times_ = value;
  // @@protoc_insertion_point(field_set:Cell.rest_div_times)
}

// double ex_fat = 10;
inline void Cell::clear_ex_fat() {
  ex_fat_ = 0;
}
inline double Cell::ex_fat() const {
  // @@protoc_insertion_point(field_get:Cell.ex_fat)
  return ex_fat_;
}
inline void Cell::set_ex_fat(double value) {
  
  ex_fat_ = value;
  // @@protoc_insertion_point(field_set:Cell.ex_fat)
}

// double in_fat = 11;
inline void Cell::clear_in_fat() {
  in_fat_ = 0;
}
inline double Cell::in_fat() const {
  // @@protoc_insertion_point(field_get:Cell.in_fat)
  return in_fat_;
}
inline void Cell::set_in_fat(double value) {
  
  in_fat_ = value;
  // @@protoc_insertion_point(field_set:Cell.in_fat)
}

// bool is_touch = 12;
inline void Cell::clear_is_touch() {
  is_touch_ = false;
}
inline bool Cell::is_touch() const {
  // @@protoc_insertion_point(field_get:Cell.is_touch)
  return is_touch_;
}
inline void Cell::set_is_touch(bool value) {
  
  is_touch_ = value;
  // @@protoc_insertion_point(field_set:Cell.is_touch)
}

// double spr_nat_len = 13;
inline void Cell::clear_spr_nat_len() {
  spr_nat_len_ = 0;
}
inline double Cell::spr_nat_len() const {
  // @@protoc_insertion_point(field_get:Cell.spr_nat_len)
  return spr_nat_len_;
}
inline void Cell::set_spr_nat_len(double value) {
  
  spr_nat_len_ = value;
  // @@protoc_insertion_point(field_set:Cell.spr_nat_len)
}

// int32 pair_index = 14;
inline void Cell::clear_pair_index() {
  pair_index_ = 0;
}
inline ::google::protobuf::int32 Cell::pair_index() const {
  // @@protoc_insertion_point(field_get:Cell.pair_index)
  return pair_index_;
}
inline void Cell::set_pair_index(::google::protobuf::int32 value) {
  
  pair_index_ = value;
  // @@protoc_insertion_point(field_set:Cell.pair_index)
}

// int32 fix_origin = 15;
inline void Cell::clear_fix_origin() {
  fix_origin_ = 0;
}
inline ::google::protobuf::int32 Cell::fix_origin() const {
  // @@protoc_insertion_point(field_get:Cell.fix_origin)
  return fix_origin_;
}
inline void Cell::set_fix_origin(::google::protobuf::int32 value) {
  
  fix_origin_ = value;
  // @@protoc_insertion_point(field_set:Cell.fix_origin)
}

// bool nullified = 16;
inline void Cell::clear_nullified() {
  nullified_ = false;
}
inline bool Cell::nullified() const {
  // @@protoc_insertion_point(field_get:Cell.nullified)
  return nullified_;
}
inline void Cell::set_nullified(bool value) {
  
  nullified_ = value;
  // @@protoc_insertion_point(field_set:Cell.nullified)
}

// bool malignant = 17;
inline void Cell::clear_malignant() {
  malignant_ = false;
}
inline bool Cell::malignant() const {
  // @@protoc_insertion_point(field_get:Cell.malignant)
  return malignant_;
}
inline void Cell::set_malignant(bool value) {
  
  malignant_ = value;
  // @@protoc_insertion_point(field_set:Cell.malignant)
}

// -------------------------------------------------------------------

// CellSet

// repeated .Cell cell = 1;
inline int CellSet::cell_size() const {
  return cell_.size();
}
inline void CellSet::clear_cell() {
  cell_.Clear();
}
inline const ::Cell& CellSet::cell(int index) const {
  // @@protoc_insertion_point(field_get:CellSet.cell)
  return cell_.Get(index);
}
inline ::Cell* CellSet::mutable_cell(int index) {
  // @@protoc_insertion_point(field_mutable:CellSet.cell)
  return cell_.Mutable(index);
}
inline ::Cell* CellSet::add_cell() {
  // @@protoc_insertion_point(field_add:CellSet.cell)
  return cell_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Cell >*
CellSet::mutable_cell() {
  // @@protoc_insertion_point(field_mutable_list:CellSet.cell)
  return &cell_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Cell >&
CellSet::cell() const {
  // @@protoc_insertion_point(field_list:CellSet.cell)
  return cell_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cell_CellState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cell_CellState>() {
  return ::Cell_CellState_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cell_2eproto__INCLUDED
