// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multidim.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "multidim.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MultidimPB {
class Dim3DoubleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dim3Double> {
} _Dim3Double_default_instance_;
class Dim3FloatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dim3Float> {
} _Dim3Float_default_instance_;

namespace protobuf_multidim_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Double, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Double, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Double, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Double, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Double, dim_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Double, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Float, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Float, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Float, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Float, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Float, dim_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim3Float, data_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Dim3Double)},
  { 9, -1, sizeof(Dim3Float)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Dim3Double_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Dim3Float_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "multidim.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Dim3Double_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Dim3Float_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Dim3Double_default_instance_.DefaultConstruct();
  _Dim3Float_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016multidim.proto\022\nMultidimPB\"c\n\nDim3Doub"
      "le\022\t\n\001X\030\001 \001(\005\022\t\n\001Y\030\002 \001(\005\022\t\n\001Z\030\003 \001(\005\022\"\n\td"
      "im_order\030\005 \003(\0162\017.MultidimPB.Dim\022\020\n\004data\030"
      "\004 \003(\001B\002\020\001\"b\n\tDim3Float\022\t\n\001X\030\001 \001(\005\022\t\n\001Y\030\002"
      " \001(\005\022\t\n\001Z\030\003 \001(\005\022\"\n\tdim_order\030\005 \003(\0162\017.Mul"
      "tidimPB.Dim\022\020\n\004data\030\004 \003(\002B\002\020\001*\032\n\003Dim\022\005\n\001"
      "X\020\000\022\005\n\001Y\020\001\022\005\n\001Z\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "multidim.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_multidim_2eproto

const ::google::protobuf::EnumDescriptor* Dim_descriptor() {
  protobuf_multidim_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_multidim_2eproto::file_level_enum_descriptors[0];
}
bool Dim_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dim3Double::kXFieldNumber;
const int Dim3Double::kYFieldNumber;
const int Dim3Double::kZFieldNumber;
const int Dim3Double::kDimOrderFieldNumber;
const int Dim3Double::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dim3Double::Dim3Double()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_multidim_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultidimPB.Dim3Double)
}
Dim3Double::Dim3Double(const Dim3Double& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dim_order_(from.dim_order_),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:MultidimPB.Dim3Double)
}

void Dim3Double::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Dim3Double::~Dim3Double() {
  // @@protoc_insertion_point(destructor:MultidimPB.Dim3Double)
  SharedDtor();
}

void Dim3Double::SharedDtor() {
}

void Dim3Double::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dim3Double::descriptor() {
  protobuf_multidim_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_multidim_2eproto::file_level_metadata[0].descriptor;
}

const Dim3Double& Dim3Double::default_instance() {
  protobuf_multidim_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dim3Double* Dim3Double::New(::google::protobuf::Arena* arena) const {
  Dim3Double* n = new Dim3Double;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dim3Double::Clear() {
// @@protoc_insertion_point(message_clear_start:MultidimPB.Dim3Double)
  dim_order_.Clear();
  data_.Clear();
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

bool Dim3Double::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultidimPB.Dim3Double)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 X = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Y = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Z = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double data = 4 [packed = true];
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (tag == 33u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MultidimPB.Dim dim_order = 5;
      case 5: {
        if (tag == 42u) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_dim_order(static_cast< ::MultidimPB::Dim >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_dim_order(static_cast< ::MultidimPB::Dim >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultidimPB.Dim3Double)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultidimPB.Dim3Double)
  return false;
#undef DO_
}

void Dim3Double::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultidimPB.Dim3Double)
  // int32 X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // int32 Z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // repeated double data = 4 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->data().data(), this->data_size(), output);
  }

  // repeated .MultidimPB.Dim dim_order = 5;
  if (this->dim_order_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_dim_order_cached_byte_size_);
  }
  for (int i = 0; i < this->dim_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->dim_order(i), output);
  }

  // @@protoc_insertion_point(serialize_end:MultidimPB.Dim3Double)
}

::google::protobuf::uint8* Dim3Double::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultidimPB.Dim3Double)
  // int32 X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // int32 Z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // repeated double data = 4 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data(i), target);
  }

  // repeated .MultidimPB.Dim dim_order = 5;
  if (this->dim_order_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _dim_order_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dim_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->dim_order(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MultidimPB.Dim3Double)
  return target;
}

size_t Dim3Double::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultidimPB.Dim3Double)
  size_t total_size = 0;

  // repeated .MultidimPB.Dim dim_order = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->dim_order_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->dim_order(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dim_order_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double data = 4 [packed = true];
  {
    unsigned int count = this->data_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 X = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 Y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // int32 Z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dim3Double::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultidimPB.Dim3Double)
  GOOGLE_DCHECK_NE(&from, this);
  const Dim3Double* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dim3Double>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultidimPB.Dim3Double)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultidimPB.Dim3Double)
    MergeFrom(*source);
  }
}

void Dim3Double::MergeFrom(const Dim3Double& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultidimPB.Dim3Double)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dim_order_.MergeFrom(from.dim_order_);
  data_.MergeFrom(from.data_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Dim3Double::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultidimPB.Dim3Double)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dim3Double::CopyFrom(const Dim3Double& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultidimPB.Dim3Double)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dim3Double::IsInitialized() const {
  return true;
}

void Dim3Double::Swap(Dim3Double* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dim3Double::InternalSwap(Dim3Double* other) {
  dim_order_.UnsafeArenaSwap(&other->dim_order_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dim3Double::GetMetadata() const {
  protobuf_multidim_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_multidim_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dim3Double

// int32 X = 1;
void Dim3Double::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Dim3Double::x() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Double.X)
  return x_;
}
void Dim3Double::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Double.X)
}

// int32 Y = 2;
void Dim3Double::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Dim3Double::y() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Double.Y)
  return y_;
}
void Dim3Double::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Double.Y)
}

// int32 Z = 3;
void Dim3Double::clear_z() {
  z_ = 0;
}
::google::protobuf::int32 Dim3Double::z() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Double.Z)
  return z_;
}
void Dim3Double::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Double.Z)
}

// repeated .MultidimPB.Dim dim_order = 5;
int Dim3Double::dim_order_size() const {
  return dim_order_.size();
}
void Dim3Double::clear_dim_order() {
  dim_order_.Clear();
}
::MultidimPB::Dim Dim3Double::dim_order(int index) const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Double.dim_order)
  return static_cast< ::MultidimPB::Dim >(dim_order_.Get(index));
}
void Dim3Double::set_dim_order(int index, ::MultidimPB::Dim value) {
  dim_order_.Set(index, value);
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Double.dim_order)
}
void Dim3Double::add_dim_order(::MultidimPB::Dim value) {
  dim_order_.Add(value);
  // @@protoc_insertion_point(field_add:MultidimPB.Dim3Double.dim_order)
}
const ::google::protobuf::RepeatedField<int>&
Dim3Double::dim_order() const {
  // @@protoc_insertion_point(field_list:MultidimPB.Dim3Double.dim_order)
  return dim_order_;
}
::google::protobuf::RepeatedField<int>*
Dim3Double::mutable_dim_order() {
  // @@protoc_insertion_point(field_mutable_list:MultidimPB.Dim3Double.dim_order)
  return &dim_order_;
}

// repeated double data = 4 [packed = true];
int Dim3Double::data_size() const {
  return data_.size();
}
void Dim3Double::clear_data() {
  data_.Clear();
}
double Dim3Double::data(int index) const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Double.data)
  return data_.Get(index);
}
void Dim3Double::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Double.data)
}
void Dim3Double::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:MultidimPB.Dim3Double.data)
}
const ::google::protobuf::RepeatedField< double >&
Dim3Double::data() const {
  // @@protoc_insertion_point(field_list:MultidimPB.Dim3Double.data)
  return data_;
}
::google::protobuf::RepeatedField< double >*
Dim3Double::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:MultidimPB.Dim3Double.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dim3Float::kXFieldNumber;
const int Dim3Float::kYFieldNumber;
const int Dim3Float::kZFieldNumber;
const int Dim3Float::kDimOrderFieldNumber;
const int Dim3Float::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dim3Float::Dim3Float()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_multidim_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultidimPB.Dim3Float)
}
Dim3Float::Dim3Float(const Dim3Float& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dim_order_(from.dim_order_),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:MultidimPB.Dim3Float)
}

void Dim3Float::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Dim3Float::~Dim3Float() {
  // @@protoc_insertion_point(destructor:MultidimPB.Dim3Float)
  SharedDtor();
}

void Dim3Float::SharedDtor() {
}

void Dim3Float::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dim3Float::descriptor() {
  protobuf_multidim_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_multidim_2eproto::file_level_metadata[1].descriptor;
}

const Dim3Float& Dim3Float::default_instance() {
  protobuf_multidim_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dim3Float* Dim3Float::New(::google::protobuf::Arena* arena) const {
  Dim3Float* n = new Dim3Float;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dim3Float::Clear() {
// @@protoc_insertion_point(message_clear_start:MultidimPB.Dim3Float)
  dim_order_.Clear();
  data_.Clear();
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

bool Dim3Float::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultidimPB.Dim3Float)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 X = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Y = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Z = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float data = 4 [packed = true];
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (tag == 37u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MultidimPB.Dim dim_order = 5;
      case 5: {
        if (tag == 42u) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_dim_order(static_cast< ::MultidimPB::Dim >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_dim_order(static_cast< ::MultidimPB::Dim >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultidimPB.Dim3Float)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultidimPB.Dim3Float)
  return false;
#undef DO_
}

void Dim3Float::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultidimPB.Dim3Float)
  // int32 X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // int32 Z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // repeated float data = 4 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->data().data(), this->data_size(), output);
  }

  // repeated .MultidimPB.Dim dim_order = 5;
  if (this->dim_order_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_dim_order_cached_byte_size_);
  }
  for (int i = 0; i < this->dim_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->dim_order(i), output);
  }

  // @@protoc_insertion_point(serialize_end:MultidimPB.Dim3Float)
}

::google::protobuf::uint8* Dim3Float::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MultidimPB.Dim3Float)
  // int32 X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // int32 Z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // repeated float data = 4 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // repeated .MultidimPB.Dim dim_order = 5;
  if (this->dim_order_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _dim_order_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dim_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->dim_order(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MultidimPB.Dim3Float)
  return target;
}

size_t Dim3Float::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultidimPB.Dim3Float)
  size_t total_size = 0;

  // repeated .MultidimPB.Dim dim_order = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->dim_order_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->dim_order(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dim_order_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float data = 4 [packed = true];
  {
    unsigned int count = this->data_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 X = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 Y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // int32 Z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dim3Float::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultidimPB.Dim3Float)
  GOOGLE_DCHECK_NE(&from, this);
  const Dim3Float* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dim3Float>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultidimPB.Dim3Float)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultidimPB.Dim3Float)
    MergeFrom(*source);
  }
}

void Dim3Float::MergeFrom(const Dim3Float& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultidimPB.Dim3Float)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dim_order_.MergeFrom(from.dim_order_);
  data_.MergeFrom(from.data_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Dim3Float::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultidimPB.Dim3Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dim3Float::CopyFrom(const Dim3Float& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultidimPB.Dim3Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dim3Float::IsInitialized() const {
  return true;
}

void Dim3Float::Swap(Dim3Float* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dim3Float::InternalSwap(Dim3Float* other) {
  dim_order_.UnsafeArenaSwap(&other->dim_order_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dim3Float::GetMetadata() const {
  protobuf_multidim_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_multidim_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dim3Float

// int32 X = 1;
void Dim3Float::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Dim3Float::x() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Float.X)
  return x_;
}
void Dim3Float::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Float.X)
}

// int32 Y = 2;
void Dim3Float::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Dim3Float::y() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Float.Y)
  return y_;
}
void Dim3Float::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Float.Y)
}

// int32 Z = 3;
void Dim3Float::clear_z() {
  z_ = 0;
}
::google::protobuf::int32 Dim3Float::z() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Float.Z)
  return z_;
}
void Dim3Float::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Float.Z)
}

// repeated .MultidimPB.Dim dim_order = 5;
int Dim3Float::dim_order_size() const {
  return dim_order_.size();
}
void Dim3Float::clear_dim_order() {
  dim_order_.Clear();
}
::MultidimPB::Dim Dim3Float::dim_order(int index) const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Float.dim_order)
  return static_cast< ::MultidimPB::Dim >(dim_order_.Get(index));
}
void Dim3Float::set_dim_order(int index, ::MultidimPB::Dim value) {
  dim_order_.Set(index, value);
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Float.dim_order)
}
void Dim3Float::add_dim_order(::MultidimPB::Dim value) {
  dim_order_.Add(value);
  // @@protoc_insertion_point(field_add:MultidimPB.Dim3Float.dim_order)
}
const ::google::protobuf::RepeatedField<int>&
Dim3Float::dim_order() const {
  // @@protoc_insertion_point(field_list:MultidimPB.Dim3Float.dim_order)
  return dim_order_;
}
::google::protobuf::RepeatedField<int>*
Dim3Float::mutable_dim_order() {
  // @@protoc_insertion_point(field_mutable_list:MultidimPB.Dim3Float.dim_order)
  return &dim_order_;
}

// repeated float data = 4 [packed = true];
int Dim3Float::data_size() const {
  return data_.size();
}
void Dim3Float::clear_data() {
  data_.Clear();
}
float Dim3Float::data(int index) const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Float.data)
  return data_.Get(index);
}
void Dim3Float::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Float.data)
}
void Dim3Float::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:MultidimPB.Dim3Float.data)
}
const ::google::protobuf::RepeatedField< float >&
Dim3Float::data() const {
  // @@protoc_insertion_point(field_list:MultidimPB.Dim3Float.data)
  return data_;
}
::google::protobuf::RepeatedField< float >*
Dim3Float::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:MultidimPB.Dim3Float.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MultidimPB

// @@protoc_insertion_point(global_scope)
