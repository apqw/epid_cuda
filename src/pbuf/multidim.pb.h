// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multidim.proto

#ifndef PROTOBUF_multidim_2eproto__INCLUDED
#define PROTOBUF_multidim_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace MultidimPB {
class Dim3Double;
class Dim3DoubleDefaultTypeInternal;
extern Dim3DoubleDefaultTypeInternal _Dim3Double_default_instance_;
class Dim3Float;
class Dim3FloatDefaultTypeInternal;
extern Dim3FloatDefaultTypeInternal _Dim3Float_default_instance_;
}  // namespace MultidimPB

namespace MultidimPB {

namespace protobuf_multidim_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_multidim_2eproto

enum Dim {
  X = 0,
  Y = 1,
  Z = 2,
  Dim_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Dim_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Dim_IsValid(int value);
const Dim Dim_MIN = X;
const Dim Dim_MAX = Z;
const int Dim_ARRAYSIZE = Dim_MAX + 1;

const ::google::protobuf::EnumDescriptor* Dim_descriptor();
inline const ::std::string& Dim_Name(Dim value) {
  return ::google::protobuf::internal::NameOfEnum(
    Dim_descriptor(), value);
}
inline bool Dim_Parse(
    const ::std::string& name, Dim* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Dim>(
    Dim_descriptor(), name, value);
}
// ===================================================================

class Dim3Double : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MultidimPB.Dim3Double) */ {
 public:
  Dim3Double();
  virtual ~Dim3Double();

  Dim3Double(const Dim3Double& from);

  inline Dim3Double& operator=(const Dim3Double& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dim3Double& default_instance();

  static inline const Dim3Double* internal_default_instance() {
    return reinterpret_cast<const Dim3Double*>(
               &_Dim3Double_default_instance_);
  }

  void Swap(Dim3Double* other);

  // implements Message ----------------------------------------------

  inline Dim3Double* New() const PROTOBUF_FINAL { return New(NULL); }

  Dim3Double* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Dim3Double& from);
  void MergeFrom(const Dim3Double& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Dim3Double* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MultidimPB.Dim dim_order = 5;
  int dim_order_size() const;
  void clear_dim_order();
  static const int kDimOrderFieldNumber = 5;
  ::MultidimPB::Dim dim_order(int index) const;
  void set_dim_order(int index, ::MultidimPB::Dim value);
  void add_dim_order(::MultidimPB::Dim value);
  const ::google::protobuf::RepeatedField<int>& dim_order() const;
  ::google::protobuf::RepeatedField<int>* mutable_dim_order();

  // repeated double data = 4 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // int32 X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 Z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MultidimPB.Dim3Double)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> dim_order_;
  mutable int _dim_order_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  mutable int _cached_size_;
  friend struct  protobuf_multidim_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dim3Float : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MultidimPB.Dim3Float) */ {
 public:
  Dim3Float();
  virtual ~Dim3Float();

  Dim3Float(const Dim3Float& from);

  inline Dim3Float& operator=(const Dim3Float& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dim3Float& default_instance();

  static inline const Dim3Float* internal_default_instance() {
    return reinterpret_cast<const Dim3Float*>(
               &_Dim3Float_default_instance_);
  }

  void Swap(Dim3Float* other);

  // implements Message ----------------------------------------------

  inline Dim3Float* New() const PROTOBUF_FINAL { return New(NULL); }

  Dim3Float* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Dim3Float& from);
  void MergeFrom(const Dim3Float& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Dim3Float* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MultidimPB.Dim dim_order = 5;
  int dim_order_size() const;
  void clear_dim_order();
  static const int kDimOrderFieldNumber = 5;
  ::MultidimPB::Dim dim_order(int index) const;
  void set_dim_order(int index, ::MultidimPB::Dim value);
  void add_dim_order(::MultidimPB::Dim value);
  const ::google::protobuf::RepeatedField<int>& dim_order() const;
  ::google::protobuf::RepeatedField<int>* mutable_dim_order();

  // repeated float data = 4 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // int32 X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 Z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MultidimPB.Dim3Float)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> dim_order_;
  mutable int _dim_order_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  mutable int _cached_size_;
  friend struct  protobuf_multidim_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Dim3Double

// int32 X = 1;
inline void Dim3Double::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Dim3Double::x() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Double.X)
  return x_;
}
inline void Dim3Double::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Double.X)
}

// int32 Y = 2;
inline void Dim3Double::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Dim3Double::y() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Double.Y)
  return y_;
}
inline void Dim3Double::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Double.Y)
}

// int32 Z = 3;
inline void Dim3Double::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 Dim3Double::z() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Double.Z)
  return z_;
}
inline void Dim3Double::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Double.Z)
}

// repeated .MultidimPB.Dim dim_order = 5;
inline int Dim3Double::dim_order_size() const {
  return dim_order_.size();
}
inline void Dim3Double::clear_dim_order() {
  dim_order_.Clear();
}
inline ::MultidimPB::Dim Dim3Double::dim_order(int index) const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Double.dim_order)
  return static_cast< ::MultidimPB::Dim >(dim_order_.Get(index));
}
inline void Dim3Double::set_dim_order(int index, ::MultidimPB::Dim value) {
  dim_order_.Set(index, value);
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Double.dim_order)
}
inline void Dim3Double::add_dim_order(::MultidimPB::Dim value) {
  dim_order_.Add(value);
  // @@protoc_insertion_point(field_add:MultidimPB.Dim3Double.dim_order)
}
inline const ::google::protobuf::RepeatedField<int>&
Dim3Double::dim_order() const {
  // @@protoc_insertion_point(field_list:MultidimPB.Dim3Double.dim_order)
  return dim_order_;
}
inline ::google::protobuf::RepeatedField<int>*
Dim3Double::mutable_dim_order() {
  // @@protoc_insertion_point(field_mutable_list:MultidimPB.Dim3Double.dim_order)
  return &dim_order_;
}

// repeated double data = 4 [packed = true];
inline int Dim3Double::data_size() const {
  return data_.size();
}
inline void Dim3Double::clear_data() {
  data_.Clear();
}
inline double Dim3Double::data(int index) const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Double.data)
  return data_.Get(index);
}
inline void Dim3Double::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Double.data)
}
inline void Dim3Double::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:MultidimPB.Dim3Double.data)
}
inline const ::google::protobuf::RepeatedField< double >&
Dim3Double::data() const {
  // @@protoc_insertion_point(field_list:MultidimPB.Dim3Double.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
Dim3Double::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:MultidimPB.Dim3Double.data)
  return &data_;
}

// -------------------------------------------------------------------

// Dim3Float

// int32 X = 1;
inline void Dim3Float::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Dim3Float::x() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Float.X)
  return x_;
}
inline void Dim3Float::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Float.X)
}

// int32 Y = 2;
inline void Dim3Float::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Dim3Float::y() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Float.Y)
  return y_;
}
inline void Dim3Float::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Float.Y)
}

// int32 Z = 3;
inline void Dim3Float::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 Dim3Float::z() const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Float.Z)
  return z_;
}
inline void Dim3Float::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Float.Z)
}

// repeated .MultidimPB.Dim dim_order = 5;
inline int Dim3Float::dim_order_size() const {
  return dim_order_.size();
}
inline void Dim3Float::clear_dim_order() {
  dim_order_.Clear();
}
inline ::MultidimPB::Dim Dim3Float::dim_order(int index) const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Float.dim_order)
  return static_cast< ::MultidimPB::Dim >(dim_order_.Get(index));
}
inline void Dim3Float::set_dim_order(int index, ::MultidimPB::Dim value) {
  dim_order_.Set(index, value);
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Float.dim_order)
}
inline void Dim3Float::add_dim_order(::MultidimPB::Dim value) {
  dim_order_.Add(value);
  // @@protoc_insertion_point(field_add:MultidimPB.Dim3Float.dim_order)
}
inline const ::google::protobuf::RepeatedField<int>&
Dim3Float::dim_order() const {
  // @@protoc_insertion_point(field_list:MultidimPB.Dim3Float.dim_order)
  return dim_order_;
}
inline ::google::protobuf::RepeatedField<int>*
Dim3Float::mutable_dim_order() {
  // @@protoc_insertion_point(field_mutable_list:MultidimPB.Dim3Float.dim_order)
  return &dim_order_;
}

// repeated float data = 4 [packed = true];
inline int Dim3Float::data_size() const {
  return data_.size();
}
inline void Dim3Float::clear_data() {
  data_.Clear();
}
inline float Dim3Float::data(int index) const {
  // @@protoc_insertion_point(field_get:MultidimPB.Dim3Float.data)
  return data_.Get(index);
}
inline void Dim3Float::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:MultidimPB.Dim3Float.data)
}
inline void Dim3Float::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:MultidimPB.Dim3Float.data)
}
inline const ::google::protobuf::RepeatedField< float >&
Dim3Float::data() const {
  // @@protoc_insertion_point(field_list:MultidimPB.Dim3Float.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
Dim3Float::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:MultidimPB.Dim3Float.data)
  return &data_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace MultidimPB

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MultidimPB::Dim> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MultidimPB::Dim>() {
  return ::MultidimPB::Dim_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_multidim_2eproto__INCLUDED
